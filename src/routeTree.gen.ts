/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LanguagePublicRouteRouteImport } from './routes/$language/_public/route'
import { Route as LanguageProtectedRouteRouteImport } from './routes/$language/_protected/route'
import { Route as LanguagePublicIndexRouteImport } from './routes/$language/_public/index'
import { Route as LanguageProtectedCreateIndexRouteImport } from './routes/$language/_protected/create/index'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const LanguageRouteImport = createFileRoute('/$language')()
const rootServerRouteImport = createServerRootRoute()

const LanguageRoute = LanguageRouteImport.update({
  id: '/$language',
  path: '/$language',
  getParentRoute: () => rootRouteImport,
} as any)
const LanguagePublicRouteRoute = LanguagePublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => LanguageRoute,
} as any)
const LanguageProtectedRouteRoute = LanguageProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => LanguageRoute,
} as any)
const LanguagePublicIndexRoute = LanguagePublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LanguagePublicRouteRoute,
} as any)
const LanguageProtectedCreateIndexRoute =
  LanguageProtectedCreateIndexRouteImport.update({
    id: '/create/',
    path: '/create/',
    getParentRoute: () => LanguageProtectedRouteRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/$language': typeof LanguagePublicRouteRouteWithChildren
  '/$language/': typeof LanguagePublicIndexRoute
  '/$language/create': typeof LanguageProtectedCreateIndexRoute
}
export interface FileRoutesByTo {
  '/$language': typeof LanguagePublicIndexRoute
  '/$language/create': typeof LanguageProtectedCreateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/$language': typeof LanguageRouteWithChildren
  '/$language/_protected': typeof LanguageProtectedRouteRouteWithChildren
  '/$language/_public': typeof LanguagePublicRouteRouteWithChildren
  '/$language/_public/': typeof LanguagePublicIndexRoute
  '/$language/_protected/create/': typeof LanguageProtectedCreateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$language' | '/$language/' | '/$language/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/$language' | '/$language/create'
  id:
    | '__root__'
    | '/$language'
    | '/$language/_protected'
    | '/$language/_public'
    | '/$language/_public/'
    | '/$language/_protected/create/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LanguageRoute: typeof LanguageRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$language': {
      id: '/$language'
      path: '/$language'
      fullPath: '/$language'
      preLoaderRoute: typeof LanguageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$language/_public': {
      id: '/$language/_public'
      path: ''
      fullPath: '/$language'
      preLoaderRoute: typeof LanguagePublicRouteRouteImport
      parentRoute: typeof LanguageRoute
    }
    '/$language/_protected': {
      id: '/$language/_protected'
      path: '/$language'
      fullPath: '/$language'
      preLoaderRoute: typeof LanguageProtectedRouteRouteImport
      parentRoute: typeof LanguageRoute
    }
    '/$language/_public/': {
      id: '/$language/_public/'
      path: '/'
      fullPath: '/$language/'
      preLoaderRoute: typeof LanguagePublicIndexRouteImport
      parentRoute: typeof LanguagePublicRouteRoute
    }
    '/$language/_protected/create/': {
      id: '/$language/_protected/create/'
      path: '/create'
      fullPath: '/$language/create'
      preLoaderRoute: typeof LanguageProtectedCreateIndexRouteImport
      parentRoute: typeof LanguageProtectedRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LanguageProtectedRouteRouteChildren {
  LanguageProtectedCreateIndexRoute: typeof LanguageProtectedCreateIndexRoute
}

const LanguageProtectedRouteRouteChildren: LanguageProtectedRouteRouteChildren =
  {
    LanguageProtectedCreateIndexRoute: LanguageProtectedCreateIndexRoute,
  }

const LanguageProtectedRouteRouteWithChildren =
  LanguageProtectedRouteRoute._addFileChildren(
    LanguageProtectedRouteRouteChildren,
  )

interface LanguagePublicRouteRouteChildren {
  LanguagePublicIndexRoute: typeof LanguagePublicIndexRoute
}

const LanguagePublicRouteRouteChildren: LanguagePublicRouteRouteChildren = {
  LanguagePublicIndexRoute: LanguagePublicIndexRoute,
}

const LanguagePublicRouteRouteWithChildren =
  LanguagePublicRouteRoute._addFileChildren(LanguagePublicRouteRouteChildren)

interface LanguageRouteChildren {
  LanguageProtectedRouteRoute: typeof LanguageProtectedRouteRouteWithChildren
  LanguagePublicRouteRoute: typeof LanguagePublicRouteRouteWithChildren
}

const LanguageRouteChildren: LanguageRouteChildren = {
  LanguageProtectedRouteRoute: LanguageProtectedRouteRouteWithChildren,
  LanguagePublicRouteRoute: LanguagePublicRouteRouteWithChildren,
}

const LanguageRouteWithChildren = LanguageRoute._addFileChildren(
  LanguageRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  LanguageRoute: LanguageRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
